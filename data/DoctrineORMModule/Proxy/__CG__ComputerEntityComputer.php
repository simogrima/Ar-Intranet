<?php

namespace DoctrineORMModule\Proxy\__CG__\Computer\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Computer extends \Computer\Entity\Computer implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'serial', 'model', 'supplier', 'invoice', 'invoiceDate', 'ddt', 'ddtDate', 'createdDate', 'editDate', 'brand', 'processor', 'status', 'category', 'history', 'recipient');
        }

        return array('__isInitialized__', 'id', 'serial', 'model', 'supplier', 'invoice', 'invoiceDate', 'ddt', 'ddtDate', 'createdDate', 'editDate', 'brand', 'processor', 'status', 'category', 'history', 'recipient');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Computer $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getSerial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSerial', array());

        return parent::getSerial();
    }

    /**
     * {@inheritDoc}
     */
    public function setSerial($serial)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSerial', array($serial));

        return parent::setSerial($serial);
    }

    /**
     * {@inheritDoc}
     */
    public function getModel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModel', array());

        return parent::getModel();
    }

    /**
     * {@inheritDoc}
     */
    public function setModel($model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModel', array($model));

        return parent::setModel($model);
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplier', array());

        return parent::getSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function setSupplier($supplier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSupplier', array($supplier));

        return parent::setSupplier($supplier);
    }

    /**
     * {@inheritDoc}
     */
    public function getInvoice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInvoice', array());

        return parent::getInvoice();
    }

    /**
     * {@inheritDoc}
     */
    public function setInvoice($invoice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInvoice', array($invoice));

        return parent::setInvoice($invoice);
    }

    /**
     * {@inheritDoc}
     */
    public function getInvoiceDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInvoiceDate', array());

        return parent::getInvoiceDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setInvoiceDate(\DateTime $invoiceDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInvoiceDate', array($invoiceDate));

        return parent::setInvoiceDate($invoiceDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getDdt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDdt', array());

        return parent::getDdt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDdt($ddt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDdt', array($ddt));

        return parent::setDdt($ddt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDdtDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDdtDate', array());

        return parent::getDdtDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDdtDate(\DateTime $ddtDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDdtDate', array($ddtDate));

        return parent::setDdtDate($ddtDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', array());

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate(\DateTime $createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', array($createdDate));

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEditDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEditDate', array());

        return parent::getEditDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEditdDate(\DateTime $createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEditdDate', array($createdDate));

        return parent::setEditdDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(\Computer\Entity\Status $status = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Computer\Entity\Category $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', array($category));

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', array());

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setBrand(\Computer\Entity\Brand $brand = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBrand', array($brand));

        return parent::setBrand($brand);
    }

    /**
     * {@inheritDoc}
     */
    public function getBrand()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBrand', array());

        return parent::getBrand();
    }

    /**
     * {@inheritDoc}
     */
    public function setProcessor(\Computer\Entity\Processor $processor = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProcessor', array($processor));

        return parent::setProcessor($processor);
    }

    /**
     * {@inheritDoc}
     */
    public function getProcessor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProcessor', array());

        return parent::getProcessor();
    }

    /**
     * {@inheritDoc}
     */
    public function addHistory(\Doctrine\Common\Collections\Collection $history)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addHistory', array($history));

        return parent::addHistory($history);
    }

    /**
     * {@inheritDoc}
     */
    public function removeHistory(\Doctrine\Common\Collections\Collection $history)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeHistory', array($history));

        return parent::removeHistory($history);
    }

    /**
     * {@inheritDoc}
     */
    public function getHistory($type = 0)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHistory', array($type));

        return parent::getHistory($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setRecipient(\User\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecipient', array($user));

        return parent::setRecipient($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecipient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecipient', array());

        return parent::getRecipient();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', array());

        return parent::prePersist();
    }

}
